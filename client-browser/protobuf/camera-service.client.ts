// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "camera-service.proto" (package "cameraService", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CameraService } from "./camera-service";
import type { InstallModulesRequest } from "./camera-service";
import type { GetInstalledModulesResponse } from "./camera-service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { IsCameraAliveResponse } from "./camera-service";
import type { Empty } from "./google/protobuf/empty";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service cameraService.CameraService
 */
export interface ICameraServiceClient {
    /**
     * @generated from protobuf rpc: IsCameraAlive(google.protobuf.Empty) returns (cameraService.IsCameraAliveResponse);
     */
    isCameraAlive(input: Empty, options?: RpcOptions): UnaryCall<Empty, IsCameraAliveResponse>;
    /**
     * @generated from protobuf rpc: GetInstalledModules(google.protobuf.Empty) returns (cameraService.GetInstalledModulesResponse);
     */
    getInstalledModules(input: Empty, options?: RpcOptions): UnaryCall<Empty, GetInstalledModulesResponse>;
    /**
     * @generated from protobuf rpc: InstallModules(cameraService.InstallModulesRequest) returns (google.protobuf.Empty);
     */
    installModules(input: InstallModulesRequest, options?: RpcOptions): UnaryCall<InstallModulesRequest, Empty>;
}
/**
 * @generated from protobuf service cameraService.CameraService
 */
export class CameraServiceClient implements ICameraServiceClient, ServiceInfo {
    typeName = CameraService.typeName;
    methods = CameraService.methods;
    options = CameraService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: IsCameraAlive(google.protobuf.Empty) returns (cameraService.IsCameraAliveResponse);
     */
    isCameraAlive(input: Empty, options?: RpcOptions): UnaryCall<Empty, IsCameraAliveResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, IsCameraAliveResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetInstalledModules(google.protobuf.Empty) returns (cameraService.GetInstalledModulesResponse);
     */
    getInstalledModules(input: Empty, options?: RpcOptions): UnaryCall<Empty, GetInstalledModulesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, GetInstalledModulesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InstallModules(cameraService.InstallModulesRequest) returns (google.protobuf.Empty);
     */
    installModules(input: InstallModulesRequest, options?: RpcOptions): UnaryCall<InstallModulesRequest, Empty> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<InstallModulesRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
