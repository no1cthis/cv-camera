// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "camera_service.proto" (package "cameraService", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message cameraService.IsCameraAliveResponse
 */
export interface IsCameraAliveResponse {
    /**
     * @generated from protobuf field: bool is_alive = 1;
     */
    isAlive: boolean;
}
/**
 * @generated from protobuf message cameraService.InstalledModules
 */
export interface InstalledModules {
    /**
     * @generated from protobuf field: repeated cameraService.InstalledModule modules = 1;
     */
    modules: InstalledModule[];
}
/**
 * @generated from protobuf message cameraService.InstalledModule
 */
export interface InstalledModule {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string package_name = 2;
     */
    packageName: string;
    /**
     * @generated from protobuf field: optional cameraService.InstalledModuleOptions options = 3;
     */
    options?: InstalledModuleOptions;
}
/**
 * @generated from protobuf message cameraService.InstallModulesRequest
 */
export interface InstallModulesRequest {
    /**
     * @generated from protobuf field: repeated cameraService.Module modules = 1;
     */
    modules: Module[];
}
/**
 * @generated from protobuf message cameraService.UninstallModulesRequest
 */
export interface UninstallModulesRequest {
    /**
     * @generated from protobuf field: repeated string modules = 1;
     */
    modules: string[];
}
/**
 * @generated from protobuf message cameraService.Module
 */
export interface Module {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string version = 2;
     */
    version: string;
}
/**
 * @generated from protobuf message cameraService.GetLastFrameRequest
 */
export interface GetLastFrameRequest {
    /**
     * @generated from protobuf field: string module = 1;
     */
    module: string;
}
/**
 * @generated from protobuf message cameraService.Frame
 */
export interface Frame {
    /**
     * @generated from protobuf field: bytes frame = 1;
     */
    frame: Uint8Array;
}
/**
 * @generated from protobuf message cameraService.InstalledModuleOptions
 */
export interface InstalledModuleOptions {
    /**
     * @generated from protobuf field: optional bool show = 1;
     */
    show?: boolean;
    /**
     * @generated from protobuf field: optional int32 processing_frame = 2;
     */
    processingFrame?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class IsCameraAliveResponse$Type extends MessageType<IsCameraAliveResponse> {
    constructor() {
        super("cameraService.IsCameraAliveResponse", [
            { no: 1, name: "is_alive", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IsCameraAliveResponse>): IsCameraAliveResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isAlive = false;
        if (value !== undefined)
            reflectionMergePartial<IsCameraAliveResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsCameraAliveResponse): IsCameraAliveResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_alive */ 1:
                    message.isAlive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsCameraAliveResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_alive = 1; */
        if (message.isAlive !== false)
            writer.tag(1, WireType.Varint).bool(message.isAlive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cameraService.IsCameraAliveResponse
 */
export const IsCameraAliveResponse = new IsCameraAliveResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstalledModules$Type extends MessageType<InstalledModules> {
    constructor() {
        super("cameraService.InstalledModules", [
            { no: 1, name: "modules", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InstalledModule }
        ]);
    }
    create(value?: PartialMessage<InstalledModules>): InstalledModules {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.modules = [];
        if (value !== undefined)
            reflectionMergePartial<InstalledModules>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstalledModules): InstalledModules {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cameraService.InstalledModule modules */ 1:
                    message.modules.push(InstalledModule.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstalledModules, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cameraService.InstalledModule modules = 1; */
        for (let i = 0; i < message.modules.length; i++)
            InstalledModule.internalBinaryWrite(message.modules[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cameraService.InstalledModules
 */
export const InstalledModules = new InstalledModules$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstalledModule$Type extends MessageType<InstalledModule> {
    constructor() {
        super("cameraService.InstalledModule", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "package_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "options", kind: "message", T: () => InstalledModuleOptions }
        ]);
    }
    create(value?: PartialMessage<InstalledModule>): InstalledModule {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.packageName = "";
        if (value !== undefined)
            reflectionMergePartial<InstalledModule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstalledModule): InstalledModule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string package_name */ 2:
                    message.packageName = reader.string();
                    break;
                case /* optional cameraService.InstalledModuleOptions options */ 3:
                    message.options = InstalledModuleOptions.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstalledModule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string package_name = 2; */
        if (message.packageName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.packageName);
        /* optional cameraService.InstalledModuleOptions options = 3; */
        if (message.options)
            InstalledModuleOptions.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cameraService.InstalledModule
 */
export const InstalledModule = new InstalledModule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstallModulesRequest$Type extends MessageType<InstallModulesRequest> {
    constructor() {
        super("cameraService.InstallModulesRequest", [
            { no: 1, name: "modules", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Module }
        ]);
    }
    create(value?: PartialMessage<InstallModulesRequest>): InstallModulesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.modules = [];
        if (value !== undefined)
            reflectionMergePartial<InstallModulesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstallModulesRequest): InstallModulesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cameraService.Module modules */ 1:
                    message.modules.push(Module.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstallModulesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cameraService.Module modules = 1; */
        for (let i = 0; i < message.modules.length; i++)
            Module.internalBinaryWrite(message.modules[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cameraService.InstallModulesRequest
 */
export const InstallModulesRequest = new InstallModulesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UninstallModulesRequest$Type extends MessageType<UninstallModulesRequest> {
    constructor() {
        super("cameraService.UninstallModulesRequest", [
            { no: 1, name: "modules", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UninstallModulesRequest>): UninstallModulesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.modules = [];
        if (value !== undefined)
            reflectionMergePartial<UninstallModulesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UninstallModulesRequest): UninstallModulesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string modules */ 1:
                    message.modules.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UninstallModulesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string modules = 1; */
        for (let i = 0; i < message.modules.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.modules[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cameraService.UninstallModulesRequest
 */
export const UninstallModulesRequest = new UninstallModulesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Module$Type extends MessageType<Module> {
    constructor() {
        super("cameraService.Module", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Module>): Module {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.version = "";
        if (value !== undefined)
            reflectionMergePartial<Module>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Module): Module {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string version */ 2:
                    message.version = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Module, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string version = 2; */
        if (message.version !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cameraService.Module
 */
export const Module = new Module$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLastFrameRequest$Type extends MessageType<GetLastFrameRequest> {
    constructor() {
        super("cameraService.GetLastFrameRequest", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetLastFrameRequest>): GetLastFrameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.module = "";
        if (value !== undefined)
            reflectionMergePartial<GetLastFrameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLastFrameRequest): GetLastFrameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLastFrameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cameraService.GetLastFrameRequest
 */
export const GetLastFrameRequest = new GetLastFrameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Frame$Type extends MessageType<Frame> {
    constructor() {
        super("cameraService.Frame", [
            { no: 1, name: "frame", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Frame>): Frame {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.frame = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<Frame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Frame): Frame {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes frame */ 1:
                    message.frame = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Frame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes frame = 1; */
        if (message.frame.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.frame);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cameraService.Frame
 */
export const Frame = new Frame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstalledModuleOptions$Type extends MessageType<InstalledModuleOptions> {
    constructor() {
        super("cameraService.InstalledModuleOptions", [
            { no: 1, name: "show", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "processing_frame", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InstalledModuleOptions>): InstalledModuleOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<InstalledModuleOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstalledModuleOptions): InstalledModuleOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool show */ 1:
                    message.show = reader.bool();
                    break;
                case /* optional int32 processing_frame */ 2:
                    message.processingFrame = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstalledModuleOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool show = 1; */
        if (message.show !== undefined)
            writer.tag(1, WireType.Varint).bool(message.show);
        /* optional int32 processing_frame = 2; */
        if (message.processingFrame !== undefined)
            writer.tag(2, WireType.Varint).int32(message.processingFrame);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cameraService.InstalledModuleOptions
 */
export const InstalledModuleOptions = new InstalledModuleOptions$Type();
/**
 * @generated ServiceType for protobuf service cameraService.CameraService
 */
export const CameraService = new ServiceType("cameraService.CameraService", [
    { name: "IsCameraAlive", options: {}, I: Empty, O: IsCameraAliveResponse },
    { name: "GetInstalledModules", options: {}, I: Empty, O: InstalledModules },
    { name: "InstallModules", options: {}, I: InstallModulesRequest, O: Empty },
    { name: "UninstallModules", options: {}, I: UninstallModulesRequest, O: Empty },
    { name: "GetLastFrame", options: {}, I: GetLastFrameRequest, O: Frame }
]);
